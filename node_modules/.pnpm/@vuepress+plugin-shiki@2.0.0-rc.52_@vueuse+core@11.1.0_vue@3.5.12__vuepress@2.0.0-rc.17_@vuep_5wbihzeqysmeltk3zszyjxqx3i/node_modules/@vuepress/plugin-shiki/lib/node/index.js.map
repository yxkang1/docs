{"version":3,"file":"index.js","sources":["../../src/node/shiki.ts","../../src/node/transformers/vuepressTransformers.ts","../../src/node/transformers/getTransformers.ts","../../src/node/utils.ts","../../src/node/markdown/applyHighlighter/createMarkdownFilePathGetter.ts","../../src/node/markdown/applyHighlighter/getLanguage.ts","../../src/node/markdown/applyHighlighter/handleMustache.ts","../../src/node/markdown/applyHighlighter/index.ts","../../src/node/markdown/highlightLinesPlugin.ts","../../src/node/markdown/preWrapperPlugin.ts","../../src/node/prepareConfigFile.ts","../../src/node/shikiPlugin.ts"],"sourcesContent":["import { bundledLanguages } from 'shiki'\n\nexport { bundledLanguages } from 'shiki'\n\nexport const bundledLanguageNames = Object.keys(bundledLanguages)\n","import type { ShikiTransformer } from 'shiki'\n\nconst CODE_ESCAPE_RE = /\\[\\\\!code/g\n\nexport const addClassTransformer: ShikiTransformer = {\n  name: 'vuepress:add-class',\n  pre(node) {\n    this.addClassToHast(node, 'vp-code')\n  },\n}\n\nexport const cleanupTransformer: ShikiTransformer = {\n  name: 'vuepress:cleanup',\n  pre(node) {\n    delete node.properties.tabindex\n  },\n}\n\n/**\n * This `transformer` is primarily for the usage instructions of themes.\n * When developers need to provide an example like `// [!code xxx]`,\n * they can use `// [\\!code xxx]` to avoid being processed by `shiki`.\n * After `shiki` completes the processing,\n * replace `[\\!code` back with `[!code` to display the correct text.\n */\nexport const removeEscapeTransformer: ShikiTransformer = {\n  name: 'vuepress:remove-escape',\n  postprocess(code) {\n    return code.replace(CODE_ESCAPE_RE, '[!code')\n  },\n}\n\nexport const emptyLineTransformer: ShikiTransformer = {\n  name: 'vuepress:empty-line',\n  code(hast) {\n    hast.children.forEach((span) => {\n      if (\n        span.type === 'element' &&\n        span.tagName === 'span' &&\n        Array.isArray(span.properties.class) &&\n        span.properties.class.includes('line') &&\n        span.children.length === 0\n      ) {\n        span.children.push({\n          type: 'element',\n          tagName: 'wbr',\n          properties: {},\n          children: [],\n        })\n      }\n    })\n  },\n}\n","import {\n  transformerMetaWordHighlight,\n  transformerNotationDiff,\n  transformerNotationErrorLevel,\n  transformerNotationFocus,\n  transformerNotationHighlight,\n  transformerNotationWordHighlight,\n  transformerRenderWhitespace,\n} from '@shikijs/transformers'\nimport type { WhitespacePosition } from '@vuepress/highlighter-helper'\nimport { resolveWhitespacePosition } from '@vuepress/highlighter-helper'\nimport type { ShikiTransformer } from 'shiki'\nimport type { ShikiHighlightOptions } from '../types.js'\nimport {\n  addClassTransformer,\n  cleanupTransformer,\n  emptyLineTransformer,\n  removeEscapeTransformer,\n} from './vuepressTransformers.js'\n\nexport const getTransformers = (\n  options: ShikiHighlightOptions,\n): ShikiTransformer[] => {\n  const transformers: ShikiTransformer[] = []\n\n  if (options.notationDiff) {\n    transformers.push(transformerNotationDiff())\n  }\n\n  if (options.notationFocus) {\n    transformers.push(\n      transformerNotationFocus({\n        classActiveLine: 'has-focus',\n        classActivePre: 'has-focused-lines',\n      }),\n    )\n  }\n\n  if (options.notationHighlight) {\n    transformers.push(transformerNotationHighlight())\n  }\n\n  if (options.notationErrorLevel) {\n    transformers.push(transformerNotationErrorLevel())\n  }\n\n  if (options.notationWordHighlight) {\n    transformers.push(transformerNotationWordHighlight())\n    transformers.push(transformerMetaWordHighlight())\n  }\n\n  transformers.push(\n    addClassTransformer,\n    cleanupTransformer,\n    removeEscapeTransformer,\n    emptyLineTransformer,\n  )\n\n  return transformers\n}\n\nexport const whitespaceTransformer = (\n  meta: string,\n  defaultPosition: WhitespacePosition | boolean = false,\n): ShikiTransformer[] => {\n  const position = resolveWhitespacePosition(meta, defaultPosition)\n  // disable current code block\n  if (position === false) return []\n\n  return [transformerRenderWhitespace({ position })]\n}\n","import type { TransformerCompactLineOption } from '@shikijs/transformers'\nimport { Logger } from '@vuepress/helper'\nimport { customAlphabet } from 'nanoid'\n\nconst VUE_RE = /-vue$/\n\nexport const PLUGIN_NAME = '@vuepress/plugin-shiki'\n\nexport const logger = new Logger(PLUGIN_NAME)\n\nexport const nanoid = customAlphabet('abcdefghijklmnopqrstuvwxyz', 10)\n\nexport const resolveLanguage = (info: string): string =>\n  info\n    .match(/^([^ :[{]+)/)?.[1]\n    ?.replace(VUE_RE, '')\n    .toLowerCase() ?? ''\n\nexport const resolveAttr = (info: string, attr: string): string | null => {\n  // try to match specified attr mark\n  const pattern = `\\\\b${attr}\\\\s*=\\\\s*(?<quote>['\"])(?<content>.+?)\\\\k<quote>(\\\\s|$)`\n  const regex = new RegExp(pattern, 'i')\n  const match = info.match(regex)\n\n  // return content if matched, null if not specified\n  return match?.groups?.content ?? null\n}\n\n/**\n * 2 steps:\n *\n * 1. convert attrs into line numbers:\n *    {4,7-13,16,23-27,40} -> [4,7,8,9,10,11,12,13,16,23,24,25,26,27,40]\n * 2. convert line numbers into line options:\n *    [{ line: number, classes: string[] }]\n */\nexport const attrsToLines = (attrs: string): TransformerCompactLineOption[] => {\n  const attrsContent = attrs.replace(/^(?:\\[.*?\\])?.*?([\\d,-]+).*/, '$1').trim()\n\n  const result: number[] = []\n\n  if (!attrsContent) {\n    return []\n  }\n\n  attrsContent\n    .split(',')\n    .map((lineNumberConfig) =>\n      lineNumberConfig.split('-').map((lineNumber) => parseInt(lineNumber, 10)),\n    )\n    .forEach(([start, end]) => {\n      if (start && end) {\n        result.push(\n          ...Array.from({ length: end - start + 1 }, (_, i) => start + i),\n        )\n      } else {\n        result.push(start)\n      }\n    })\n\n  return result.map((line) => ({\n    line,\n    classes: ['highlighted'],\n  }))\n}\n","import type MarkdownIt from 'markdown-it'\nimport type { MarkdownEnv } from 'vuepress/markdown'\n\nexport type MarkdownFilePathGetter = () => string\n\nexport const createMarkdownFilePathGetter = (\n  md: MarkdownIt,\n): MarkdownFilePathGetter => {\n  const store: { path?: string | null } = {}\n\n  const rawRender = md.render.bind(md)\n\n  // we need to store file path before each render\n  md.render = (src, env: MarkdownEnv) => {\n    store.path = env.filePathRelative\n\n    return rawRender(src, env)\n  }\n\n  return () => store.path || 'dynamic pages'\n}\n","import { isSpecialLang } from 'shiki'\nimport { colors } from 'vuepress/utils'\nimport { logger, resolveLanguage } from '../../utils.js'\nimport type { MarkdownFilePathGetter } from './createMarkdownFilePathGetter.js'\n\nconst WARNED_LANGS = new Set<string>()\n\nexport const getLanguage = (\n  lang: string,\n  loadedLanguages: string[],\n  defaultLang: string | undefined,\n  logLevel: string,\n  getMarkdownFilePath: MarkdownFilePathGetter,\n): string => {\n  let result = resolveLanguage(lang)\n\n  if (result && !loadedLanguages.includes(result) && !isSpecialLang(result)) {\n    // warn for unknown languages only once\n    if (logLevel !== 'silent' && !WARNED_LANGS.has(result)) {\n      logger.warn(\n        `Missing ${colors.cyan(lang)} highlighter, ${defaultLang ? `use ${colors.cyan(defaultLang)} to highlight instead.` : 'skip highlighting'}`,\n      )\n      WARNED_LANGS.add(result)\n    }\n\n    // log file path if unknown language is found\n    if (logLevel === 'debug') {\n      logger.info(\n        `Unknown language ${colors.cyan(result)} found in ${colors.cyan(getMarkdownFilePath())}`,\n      )\n    }\n\n    result = defaultLang || 'plain'\n  }\n\n  return result\n}\n","import { nanoid } from '../../utils.js'\n\nconst MUSTACHE_REG = /\\{\\{[^]*?\\}\\}/g\n\ntype MustacheStore = Map<string, string>\n\n/**\n * Replace mustache with unique markers\n * @param str content\n * @param store mustache store\n * @returns\n */\nconst removeMustache = (str: string, store: MustacheStore): string =>\n  str.replace(MUSTACHE_REG, (match) => {\n    let marker = store.get(match)\n\n    if (!marker) {\n      marker = nanoid()\n      store.set(match, marker)\n    }\n\n    return marker\n  })\n\nconst restoreMustache = (str: string, store: MustacheStore): string => {\n  let result = str\n\n  store.forEach((marker, match) => {\n    result = result.replaceAll(marker, match)\n  })\n\n  return result\n}\n\nexport const handleMustache = (\n  str: string,\n  highlight: (str: string) => string,\n): string => {\n  const store = new Map<string, string>()\n\n  return restoreMustache(highlight(removeMustache(str, store).trimEnd()), store)\n}\n","import { transformerCompactLineOptions } from '@shikijs/transformers'\nimport type MarkdownIt from 'markdown-it'\nimport { createHighlighter } from 'shiki'\nimport type { App } from 'vuepress'\nimport { bundledLanguageNames } from '../../shiki.js'\nimport {\n  getTransformers,\n  whitespaceTransformer,\n} from '../../transformers/getTransformers.js'\nimport type { ShikiHighlightOptions } from '../../types.js'\nimport { attrsToLines } from '../../utils.js'\nimport { createMarkdownFilePathGetter } from './createMarkdownFilePathGetter.js'\nimport { getLanguage } from './getLanguage.js'\nimport { handleMustache } from './handleMustache.js'\n\nexport const applyHighlighter = async (\n  md: MarkdownIt,\n  app: App,\n  {\n    langs = bundledLanguageNames,\n    langAlias = {},\n    defaultLang,\n    transformers: userTransformers = [],\n    ...options\n  }: ShikiHighlightOptions = {},\n): Promise<void> => {\n  const logLevel = options.logLevel ?? (app.env.isDebug ? 'debug' : 'warn')\n  const getMarkdownFilePath =\n    logLevel === 'debug' ? createMarkdownFilePathGetter(md) : null\n\n  const highlighter = await createHighlighter({\n    langs,\n    langAlias,\n    themes:\n      'themes' in options\n        ? Object.values(options.themes)\n        : [options.theme ?? 'nord'],\n  })\n\n  await options.shikiSetup?.(highlighter)\n\n  const transformers = getTransformers(options)\n  const loadedLanguages = highlighter.getLoadedLanguages()\n\n  md.options.highlight = (content, language, attrs) =>\n    handleMustache(content, (str) =>\n      highlighter.codeToHtml(str, {\n        lang: getLanguage(\n          language,\n          loadedLanguages,\n          defaultLang,\n          logLevel,\n          getMarkdownFilePath!,\n        ),\n        meta: {\n          /**\n           * Custom `transformers` passed by users may require `attrs`.\n           * e.g. [transformerNotationWordHighlight](https://shiki.style/packages/transformers#transformernotationwordhighlight)\n           */\n          __raw: attrs,\n        },\n        transformers: [\n          ...transformers,\n          ...((options.highlightLines ?? true)\n            ? [transformerCompactLineOptions(attrsToLines(attrs))]\n            : []),\n          ...whitespaceTransformer(attrs, options.whitespace),\n          ...userTransformers,\n        ],\n        ...('themes' in options\n          ? {\n              themes: options.themes,\n              defaultColor: false,\n            }\n          : { theme: options.theme ?? 'nord' }),\n      }),\n    )\n}\n","// Modified from https://github.com/egoist/markdown-it-highlight-lines\n// Now this plugin is only used to normalize line attrs.\n// The else part of line highlights logic is in '../highlight.ts'.\n\nimport type { Markdown } from 'vuepress/markdown'\n\nconst HIGHLIGHT_LINES_REGEXP = /{([\\d,-]+)}/\n\nexport const highlightLinesPlugin = (md: Markdown): void => {\n  const rawFence = md.renderer.rules.fence!\n\n  md.renderer.rules.fence = (...args) => {\n    const [tokens, idx] = args\n    const token = tokens[idx]\n\n    const rawInfo = token.info || ''\n    const result = rawInfo.match(HIGHLIGHT_LINES_REGEXP)\n\n    if (!result) {\n      return rawFence(...args)\n    }\n\n    // ensure the next plugin get the correct lang\n    token.info = rawInfo.replace(HIGHLIGHT_LINES_REGEXP, '').trim()\n\n    const lines = result[1]\n\n    token.info += ` ${lines}`\n    return rawFence(...args)\n  }\n}\n","// markdown-it plugin for generating line numbers.\n// v-pre block logic is in `../highlight.ts`\nimport type { Markdown } from 'vuepress/markdown'\nimport { resolveAttr, resolveLanguage } from '../utils.js'\n\nconst PRE_ATTRS_REGEXP = /<pre([\\s\\S]*?)style=\"([^\"]*)\"([^>]*)>/\n\nexport interface MarkdownItPreWrapperOptions {\n  /**\n   * Wrap the `<pre>` tag with an extra `<div>` or not. Do not disable it unless you\n   * understand what's it for\n   *\n   * - Required for line numbers, title display and code block collapsing\n   */\n  preWrapper?: boolean\n}\n\nexport const preWrapperPlugin = (\n  md: Markdown,\n  { preWrapper = true }: MarkdownItPreWrapperOptions = {},\n): void => {\n  const rawFence = md.renderer.rules.fence!\n\n  md.renderer.rules.fence = (...args) => {\n    let result = rawFence(...args)\n\n    if (!result.startsWith('<pre')) {\n      return result\n    }\n\n    const [tokens, idx, options] = args\n    const token = tokens[idx]\n\n    // get token info\n    const info = token.info ? md.utils.unescapeAll(token.info).trim() : ''\n\n    const lang = resolveLanguage(info)\n    const languageClass = `${options.langPrefix}${lang}`\n\n    if (!preWrapper) {\n      /**\n       * remove `<code>` attributes\n       *\n       * In the source code of `markdown-it fence line 71, line 74`,\n       * `fence` writes `class=\"language-*\"` onto the `code` element,\n       * whereas in past versions, `vuepress` wrote it on the `pre` element.\n       * Therefore, this behavior needs to be reset.\n       *\n       * Even though `shiki` directly returns the contents within `<pre>`\n       * at `line 48` of `markdown-it`, I believe it is still prudent to make this adjustment.\n       *\n       * @see https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.mjs\n       */\n      result = result.replace(/<code[^]*?>/, '<code>')\n      result = `<pre class=\"${languageClass}\"${result.slice('<pre'.length)}`\n      return result\n    }\n\n    const title = resolveAttr(info, 'title') || lang\n    let styles = ''\n\n    // before: maybe `v-pre class=\"shiki *\"`\n    // after: style=\"*\" tab-index=\"*\"\n    result = result.replace(\n      PRE_ATTRS_REGEXP,\n      (_, before: string, style: string, after: string) => {\n        styles = style.trim()\n        // Keep `v-pre class=\"*\"`, remove the rest.\n        return `<pre ${before.trim()}${after.trimEnd()}>`\n      },\n    )\n\n    /**\n     * Add information to dataset for current code block.\n     */\n    return `<div class=\"${languageClass}\" data-highlighter=\"shiki\" data-ext=\"${lang}\" data-title=\"${title}\" style=\"${styles}\">${result}</div>`\n  }\n}\n","import { getRealPath } from '@vuepress/helper'\nimport type { App } from 'vuepress'\nimport type { ShikiPluginOptions } from './options.js'\nimport { PLUGIN_NAME } from './utils.js'\n\nconst { url } = import.meta\n\nexport const prepareConfigFile = (\n  app: App,\n  {\n    lineNumbers = true,\n    highlightLines = true,\n    collapsedLines = 'disable',\n    notationDiff,\n    notationErrorLevel,\n    notationFocus,\n    notationHighlight,\n    notationWordHighlight,\n    whitespace,\n  }: ShikiPluginOptions,\n): Promise<string> => {\n  const imports: string[] = [\n    `import \"${getRealPath('@vuepress/highlighter-helper/styles/base.css', url)}\"`,\n    `import \"${getRealPath(`${PLUGIN_NAME}/styles/shiki.css`, import.meta.url)}\"`,\n  ]\n\n  const setups: string[] = []\n\n  if (lineNumbers !== 'disable') {\n    imports.push(\n      `import \"${getRealPath('@vuepress/highlighter-helper/styles/line-numbers.css', url)}\"`,\n    )\n  }\n\n  if (highlightLines || notationHighlight) {\n    imports.push(\n      `import \"${getRealPath('@vuepress/highlighter-helper/styles/notation-highlight.css', url)}\"`,\n    )\n  }\n\n  if (notationDiff) {\n    imports.push(\n      `import \"${getRealPath('@vuepress/highlighter-helper/styles/notation-diff.css', url)}\"`,\n    )\n  }\n\n  if (notationErrorLevel) {\n    imports.push(\n      `import \"${getRealPath('@vuepress/highlighter-helper/styles/notation-error-level.css', url)}\"`,\n    )\n  }\n\n  if (notationFocus) {\n    imports.push(\n      `import \"${getRealPath('@vuepress/highlighter-helper/styles/notation-focus.css', url)}\"`,\n    )\n  }\n\n  if (notationHighlight) {\n    imports.push(\n      `import \"${getRealPath('@vuepress/highlighter-helper/styles/notation-highlight.css', url)}\"`,\n    )\n  }\n\n  if (notationWordHighlight) {\n    imports.push(\n      `import \"${getRealPath('@vuepress/highlighter-helper/styles/notation-word-highlight.css', url)}\"`,\n    )\n  }\n\n  if (whitespace) {\n    imports.push(\n      `import \"${getRealPath('@vuepress/highlighter-helper/styles/whitespace.css', url)}\"`,\n    )\n  }\n\n  if (collapsedLines !== 'disable') {\n    imports.push(\n      `import \"${getRealPath('@vuepress/highlighter-helper/styles/collapsed-lines.css', url)}\"`,\n      `import { setupCollapsedLines } from \"${getRealPath('@vuepress/highlighter-helper/composables/collapsedLines.js', url)}\"`,\n    )\n    setups.push('setupCollapsedLines()')\n  }\n\n  let code = imports.join('\\n')\n\n  if (setups.length) {\n    code += `\\n\nexport default {\n  setup() {\n    ${setups.join('\\n    ')}\n  }\n}\\n`\n  }\n\n  return app.writeTemp('shiki/config.js', code)\n}\n","import type {\n  MarkdownItCollapsedLinesOptions,\n  MarkdownItLineNumbersOptions,\n} from '@vuepress/highlighter-helper'\nimport {\n  collapsedLines as collapsedLinesPlugin,\n  lineNumbers as lineNumbersPlugin,\n} from '@vuepress/highlighter-helper'\nimport type { Plugin } from 'vuepress/core'\nimport { isPlainObject } from 'vuepress/shared'\nimport type { MarkdownItPreWrapperOptions } from './markdown/index.js'\nimport {\n  applyHighlighter,\n  highlightLinesPlugin,\n  preWrapperPlugin,\n} from './markdown/index.js'\nimport type { ShikiPluginOptions } from './options.js'\nimport { prepareConfigFile } from './prepareConfigFile.js'\n\nexport const shikiPlugin = (options: ShikiPluginOptions = {}): Plugin => {\n  const opt: ShikiPluginOptions = {\n    preWrapper: true,\n    lineNumbers: true,\n    collapsedLines: 'disable',\n    ...options,\n  }\n\n  return {\n    name: '@vuepress/plugin-shiki',\n\n    extendsMarkdown: async (md, app) => {\n      // FIXME: Remove in stable version\n      // eslint-disable-next-line @typescript-eslint/no-deprecated\n      const { code } = app.options.markdown\n\n      await applyHighlighter(md, app, {\n        ...(isPlainObject(code) ? code : {}),\n        ...options,\n      })\n\n      const { preWrapper, lineNumbers, collapsedLines } = opt\n\n      md.use(highlightLinesPlugin)\n      md.use<MarkdownItPreWrapperOptions>(preWrapperPlugin, { preWrapper })\n      if (preWrapper) {\n        md.use<MarkdownItLineNumbersOptions>(lineNumbersPlugin, {\n          lineNumbers,\n        })\n        md.use<MarkdownItCollapsedLinesOptions>(collapsedLinesPlugin, {\n          collapsedLines,\n        })\n      }\n    },\n\n    clientConfigFile: (app) => prepareConfigFile(app, opt),\n  }\n}\n"],"names":["bundledLanguageNames","bundledLanguages","CODE_ESCAPE_RE","addClassTransformer","node","cleanupTransformer","removeEscapeTransformer","code","emptyLineTransformer","hast","span","getTransformers","options","transformers","transformerNotationDiff","transformerNotationFocus","transformerNotationHighlight","transformerNotationErrorLevel","transformerNotationWordHighlight","transformerMetaWordHighlight","whitespaceTransformer","meta","defaultPosition","position","resolveWhitespacePosition","transformerRenderWhitespace","VUE_RE","PLUGIN_NAME","logger","Logger","nanoid","customAlphabet","resolveLanguage","info","resolveAttr","attr","pattern","regex","attrsToLines","attrs","attrsContent","result","lineNumberConfig","lineNumber","start","end","_","i","line","createMarkdownFilePathGetter","md","store","rawRender","src","env","WARNED_LANGS","getLanguage","lang","loadedLanguages","defaultLang","logLevel","getMarkdownFilePath","isSpecialLang","colors","MUSTACHE_REG","removeMustache","str","match","marker","restoreMustache","handleMustache","highlight","applyHighlighter","app","langs","langAlias","userTransformers","highlighter","createHighlighter","content","language","transformerCompactLineOptions","HIGHLIGHT_LINES_REGEXP","highlightLinesPlugin","rawFence","args","tokens","idx","token","rawInfo","lines","PRE_ATTRS_REGEXP","preWrapperPlugin","preWrapper","languageClass","title","styles","before","style","after","url","prepareConfigFile","lineNumbers","highlightLines","collapsedLines","notationDiff","notationErrorLevel","notationFocus","notationHighlight","notationWordHighlight","whitespace","imports","getRealPath","setups","shikiPlugin","opt","isPlainObject","lineNumbersPlugin","collapsedLinesPlugin"],"mappings":"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"}