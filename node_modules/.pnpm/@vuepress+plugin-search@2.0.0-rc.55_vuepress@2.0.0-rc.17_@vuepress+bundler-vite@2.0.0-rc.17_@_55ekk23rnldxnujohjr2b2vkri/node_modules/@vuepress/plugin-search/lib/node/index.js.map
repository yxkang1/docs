{"version":3,"file":"index.js","sources":["../../src/node/prepareSearchIndex.ts","../../src/node/searchPlugin.ts"],"sourcesContent":["import type { App } from 'vuepress/core'\nimport type { SearchIndex } from '../shared/index.js'\nimport type { SearchPluginOptions } from './searchPlugin.js'\n\nconst HMR_CODE = `\nif (import.meta.webpackHot) {\n  import.meta.webpackHot.accept()\n  if (__VUE_HMR_RUNTIME__.updateSearchIndex) {\n    __VUE_HMR_RUNTIME__.updateSearchIndex(searchIndex)\n  }\n}\n\nif (import.meta.hot) {\n  import.meta.hot.accept(({ searchIndex }) => {\n    __VUE_HMR_RUNTIME__.updateSearchIndex(searchIndex)\n  })\n}\n`\n\nexport const prepareSearchIndex = async ({\n  app,\n  isSearchable,\n  getExtraFields,\n}: {\n  app: App\n  isSearchable: Required<SearchPluginOptions>['isSearchable']\n  getExtraFields: Required<SearchPluginOptions>['getExtraFields']\n}): Promise<string> => {\n  // generate search index\n  const searchIndex: SearchIndex = app.pages\n    .filter(isSearchable)\n    .map((page) => ({\n      title: page.title,\n      headers: page.headers,\n      path: page.path,\n      pathLocale: page.pathLocale,\n      extraFields: getExtraFields(page),\n    }))\n\n  // search index file content\n  let content = `\\\nexport const SEARCH_INDEX = ${JSON.stringify(searchIndex, null, 2)}\n`\n\n  // inject HMR code\n  if (app.env.isDev) {\n    content += HMR_CODE\n  }\n\n  return app.writeTemp('internal/searchIndex.js', content)\n}\n","import { watch } from 'chokidar'\nimport type { Page, Plugin } from 'vuepress/core'\nimport type { LocaleConfig } from 'vuepress/shared'\nimport { getDirname, path } from 'vuepress/utils'\nimport type { HotKeyOptions } from '../shared/index.js'\nimport { prepareSearchIndex } from './prepareSearchIndex.js'\n\nconst __dirname = getDirname(import.meta.url)\n\n/**\n * Options for @vuepress/plugin-search\n */\nexport interface SearchPluginOptions {\n  /**\n   * Locales config for search box\n   */\n  locales?: LocaleConfig<{\n    placeholder: string\n  }>\n\n  /**\n   * Specify the [event.key](http://keycode.info/) of the hotkeys\n   *\n   * When hotkeys are pressed, the search box input will be focused\n   *\n   * Set to an empty array to disable hotkeys\n   *\n   * @default ['s', '/']\n   */\n  hotKeys?: (HotKeyOptions | string)[]\n\n  /**\n   * Specify the maximum number of search results\n   *\n   * @default 5\n   */\n  maxSuggestions?: number\n\n  /**\n   * A function to determine whether a page should be included in the search index\n   */\n  isSearchable?: (page: Page) => boolean\n\n  /**\n   * A function to add extra fields to the search index of a page\n   */\n  getExtraFields?: (page: Page) => string[]\n}\n\nexport const searchPlugin = ({\n  locales = {},\n  hotKeys = ['s', '/'],\n  maxSuggestions = 5,\n  isSearchable = () => true,\n  getExtraFields = () => [],\n}: SearchPluginOptions = {}): Plugin => ({\n  name: '@vuepress/plugin-search',\n\n  clientConfigFile: path.resolve(__dirname, '../client/config.js'),\n\n  define: {\n    __SEARCH_LOCALES__: locales,\n    __SEARCH_HOT_KEYS__: hotKeys,\n    __SEARCH_MAX_SUGGESTIONS__: maxSuggestions,\n  },\n\n  onPrepared: async (app) => {\n    await prepareSearchIndex({ app, isSearchable, getExtraFields })\n  },\n\n  onWatched: (app, watchers) => {\n    // here we only watch the page data files\n    // if the extra fields generated by `getExtraFields` are not included\n    // in the page data, the changes may not be watched\n    const searchIndexWatcher = watch('pages/**/*.js', {\n      cwd: app.dir.temp(),\n      ignoreInitial: true,\n    })\n    searchIndexWatcher.on('add', () => {\n      void prepareSearchIndex({ app, isSearchable, getExtraFields })\n    })\n    searchIndexWatcher.on('change', () => {\n      void prepareSearchIndex({ app, isSearchable, getExtraFields })\n    })\n    searchIndexWatcher.on('unlink', () => {\n      void prepareSearchIndex({ app, isSearchable, getExtraFields })\n    })\n    watchers.push(searchIndexWatcher)\n  },\n})\n"],"names":["HMR_CODE","prepareSearchIndex","app","isSearchable","getExtraFields","searchIndex","page","content","__dirname","getDirname","searchPlugin","locales","hotKeys","maxSuggestions","path","watchers","searchIndexWatcher","watch"],"mappings":"uFAIA,MAAMA,EAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeJC,EAAqB,MAAO,CACvC,IAAAC,EACA,aAAAC,EACA,eAAAC,CACF,IAIuB,CAErB,MAAMC,EAA2BH,EAAI,MAClC,OAAOC,CAAY,EACnB,IAAKG,IAAU,CACd,MAAOA,EAAK,MACZ,QAASA,EAAK,QACd,KAAMA,EAAK,KACX,WAAYA,EAAK,WACjB,YAAaF,EAAeE,CAAI,CAClC,EAAE,EAGJ,IAAIC,EAAU,+BACc,KAAK,UAAUF,EAAa,KAAM,CAAC,CAAC;AAAA,EAIhE,OAAIH,EAAI,IAAI,QACVK,GAAWP,GAGNE,EAAI,UAAU,0BAA2BK,CAAO,CACzD,EC3CMC,EAAYC,EAAW,YAAY,GAAG,EA0C/BC,EAAe,CAAC,CAC3B,QAAAC,EAAU,CAAA,EACV,QAAAC,EAAU,CAAC,IAAK,GAAG,EACnB,eAAAC,EAAiB,EACjB,aAAAV,EAAe,IAAM,GACrB,eAAAC,EAAiB,IAAM,CACzB,CAAA,EAAyB,CAAA,KAAgB,CACvC,KAAM,0BAEN,iBAAkBU,EAAK,QAAQN,EAAW,qBAAqB,EAE/D,OAAQ,CACN,mBAAoBG,EACpB,oBAAqBC,EACrB,2BAA4BC,CAC9B,EAEA,WAAY,MAAOX,GAAQ,CACzB,MAAMD,EAAmB,CAAE,IAAAC,EAAK,aAAAC,EAAc,eAAAC,CAAe,CAAC,CAChE,EAEA,UAAW,CAACF,EAAKa,IAAa,CAI5B,MAAMC,EAAqBC,EAAM,gBAAiB,CAChD,IAAKf,EAAI,IAAI,OACb,cAAe,EACjB,CAAC,EACDc,EAAmB,GAAG,MAAO,IAAM,CAC5Bf,EAAmB,CAAE,IAAAC,EAAK,aAAAC,EAAc,eAAAC,CAAe,CAAC,CAC/D,CAAC,EACDY,EAAmB,GAAG,SAAU,IAAM,CAC/Bf,EAAmB,CAAE,IAAAC,EAAK,aAAAC,EAAc,eAAAC,CAAe,CAAC,CAC/D,CAAC,EACDY,EAAmB,GAAG,SAAU,IAAM,CAC/Bf,EAAmB,CAAE,IAAAC,EAAK,aAAAC,EAAc,eAAAC,CAAe,CAAC,CAC/D,CAAC,EACDW,EAAS,KAAKC,CAAkB,CAClC,CACF"}