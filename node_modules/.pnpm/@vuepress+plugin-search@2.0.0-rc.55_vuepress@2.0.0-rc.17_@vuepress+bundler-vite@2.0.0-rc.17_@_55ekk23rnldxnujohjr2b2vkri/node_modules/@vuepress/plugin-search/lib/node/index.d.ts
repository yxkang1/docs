import { Page, Plugin, App } from 'vuepress/core';
import { PageData, LocaleConfig } from 'vuepress/shared';

interface HotKeyOptions {
    /**
     * Value of `event.key` to trigger the hot key
     */
    key: string;
    /**
     * Whether to press `event.altKey` at the same time
     *
     * @default false
     */
    alt?: boolean;
    /**
     * Whether to press `event.ctrlKey` at the same time
     *
     * @default false
     */
    ctrl?: boolean;
    /**
     * Whether to press `event.shiftKey` at the same time
     *
     * @default false
     */
    shift?: boolean;
}

interface SearchIndexItem extends Pick<PageData, 'headers' | 'path' | 'title'> {
    pathLocale: string;
    extraFields: string[];
}
type SearchIndex = SearchIndexItem[];

/**
 * Options for @vuepress/plugin-search
 */
interface SearchPluginOptions {
    /**
     * Locales config for search box
     */
    locales?: LocaleConfig<{
        placeholder: string;
    }>;
    /**
     * Specify the [event.key](http://keycode.info/) of the hotkeys
     *
     * When hotkeys are pressed, the search box input will be focused
     *
     * Set to an empty array to disable hotkeys
     *
     * @default ['s', '/']
     */
    hotKeys?: (HotKeyOptions | string)[];
    /**
     * Specify the maximum number of search results
     *
     * @default 5
     */
    maxSuggestions?: number;
    /**
     * A function to determine whether a page should be included in the search index
     */
    isSearchable?: (page: Page) => boolean;
    /**
     * A function to add extra fields to the search index of a page
     */
    getExtraFields?: (page: Page) => string[];
}
declare const searchPlugin: ({ locales, hotKeys, maxSuggestions, isSearchable, getExtraFields, }?: SearchPluginOptions) => Plugin;

declare const prepareSearchIndex: ({ app, isSearchable, getExtraFields, }: {
    app: App;
    isSearchable: Required<SearchPluginOptions>["isSearchable"];
    getExtraFields: Required<SearchPluginOptions>["getExtraFields"];
}) => Promise<string>;

export { type HotKeyOptions, type SearchIndex, type SearchIndexItem, type SearchPluginOptions, prepareSearchIndex, searchPlugin };
