{"version":3,"file":"setupRedirect-q886RMSd.js","sources":["../../src/shared/normalizePath.ts","../../src/client/composables/setupDevServerRedirect.ts","../../src/client/composables/setupRedirect.ts"],"sourcesContent":["const HASH_REGEXP = /#.*$/u\n\nexport const normalizePath = (path: string, removeHash = false): string =>\n  (removeHash ? path.replace(HASH_REGEXP, '') : path)\n    .replace(/\\/(?:README\\.md)?$/i, '/index.html')\n    .replace(/(?:\\.(?:md|html))?$/, '.html')\n","import { redirectMap } from '@temp/redirect/map.js'\nimport { entries, isLinkHttp } from '@vuepress/helper/client'\nimport { usePreferredLanguages } from '@vueuse/core'\nimport { computed, watch } from 'vue'\nimport { useRoute, useRouteLocale, useRouter } from 'vuepress/client'\nimport type { RedirectBehaviorConfig } from '../../shared/index.js'\nimport { normalizePath } from '../../shared/index.js'\n\nexport const setupDevServerRedirect = ({\n  autoLocale,\n  config,\n  defaultBehavior,\n  defaultLocale: defaultLocalePath,\n  localeFallback,\n}: RedirectBehaviorConfig): void => {\n  const localeEntries = Object.entries(config)\n  const languages = usePreferredLanguages()\n  const route = useRoute()\n  const router = useRouter()\n  const routeLocale = useRouteLocale()\n\n  const isRootLocale = computed(() => routeLocale.value === '/')\n\n  const handleLocaleRedirect = (): void => {\n    const routes = router.getRoutes()\n    const defaultLocale =\n      defaultLocalePath &&\n      routes.some(\n        ({ path }) => path === route.path.replace('/', defaultLocalePath),\n      )\n        ? defaultLocalePath\n        : routes.find(\n            ({ path }) =>\n              route.path.split('/').length >= 3 &&\n              path === route.path.replace(/^\\/[^/]+\\//, '/'),\n          )?.path\n\n    let matchedLocalePath: string | null = null\n\n    // get matched locale\n    // eslint-disable-next-line no-restricted-syntax\n    findLanguage: for (const lang of languages.value)\n      for (const [localePath, langs] of localeEntries)\n        if (langs.includes(lang)) {\n          if (\n            localeFallback &&\n            routes.every(({ path }) => path !== route.path.replace('/', path))\n          )\n            continue\n\n          matchedLocalePath = localePath\n          break findLanguage\n        }\n\n    // default link\n    const defaultRoute = defaultLocale\n      ? route.fullPath.replace('/', defaultLocale)\n      : null\n\n    // a locale matches\n    if (matchedLocalePath) {\n      const hasLocalePage = routes.some(\n        ({ path }) => route.path.replace('/', matchedLocalePath) === path,\n      )\n      const localeRoute = route.fullPath.replace('/', matchedLocalePath)\n\n      const routePath =\n        // the locale page exists\n        hasLocalePage\n          ? localeRoute\n          : // the page does not exist\n            defaultBehavior === 'homepage'\n            ? // locale homepage\n              matchedLocalePath\n            : defaultBehavior === 'defaultLocale' && defaultRoute\n              ? // default locale page\n                defaultRoute\n              : // as is to get a 404 page of that locale\n                localeRoute\n\n      router.replace(routePath)\n    }\n    // we have a default page\n    else if (defaultRoute) {\n      router.replace(defaultRoute)\n    } else if (route.path !== '/404.html') {\n      router.replace('/404.html')\n    }\n  }\n\n  watch(\n    () => route.path,\n    (path) => {\n      // handle redirects\n      for (const [from, to] of entries(redirectMap))\n        if (normalizePath(path.toLowerCase()) === from.toLowerCase()) {\n          if (isLinkHttp(to)) window.open(to)\n          else router.replace(to)\n\n          return\n        }\n\n      if (autoLocale && isRootLocale.value) handleLocaleRedirect()\n    },\n    { immediate: true },\n  )\n}\n","import { onMounted } from 'vue'\nimport { useRouteLocale, useRoutePath, useRouter } from 'vuepress/client'\nimport type { RedirectBehaviorConfig } from '../../shared/index.js'\nimport { statusSessionStorage } from '../utils/index.js'\nimport { useRedirectInfo } from './useRedirectInfo.js'\n\nexport interface LocaleInfo {\n  lang: string\n  localePath: string\n}\n\nexport const setupRedirect = (behaviorConfig: RedirectBehaviorConfig): void => {\n  const redirectInfo = useRedirectInfo(behaviorConfig)\n  const routeLocale = useRouteLocale()\n  const routePath = useRoutePath()\n  const router = useRouter()\n\n  onMounted(() => {\n    if (redirectInfo.value && !statusSessionStorage.value[routeLocale.value]) {\n      router.replace(\n        routePath.value.replace(\n          routeLocale.value,\n          redirectInfo.value.localePath,\n        ),\n      )\n      statusSessionStorage.value[routeLocale.value] = true\n    }\n  })\n}\n"],"names":["HASH_REGEXP","normalizePath","path","removeHash","setupDevServerRedirect","autoLocale","config","defaultBehavior","defaultLocalePath","localeFallback","localeEntries","languages","usePreferredLanguages","route","useRoute","router","useRouter","routeLocale","useRouteLocale","isRootLocale","computed","handleLocaleRedirect","routes","defaultLocale","matchedLocalePath","findLanguage","lang","localePath","langs","defaultRoute","hasLocalePage","localeRoute","routePath","watch","from","to","entries","redirectMap","isLinkHttp","setupRedirect","behaviorConfig","redirectInfo","useRedirectInfo","useRoutePath","onMounted","statusSessionStorage"],"mappings":"6XAAA,MAAMA,EAAc,QAEPC,EAAgB,CAACC,EAAcC,EAAa,MACtDA,EAAaD,EAAK,QAAQF,EAAa,EAAE,EAAIE,GAC3C,QAAQ,sBAAuB,aAAa,EAC5C,QAAQ,sBAAuB,OAAO,ECG9BE,EAAyB,CAAC,CACrC,WAAAC,EACA,OAAAC,EACA,gBAAAC,EACA,cAAeC,EACf,eAAAC,CACF,IAAoC,CAClC,MAAMC,EAAgB,OAAO,QAAQJ,CAAM,EACrCK,EAAYC,EAAsB,EAClCC,EAAQC,EAAS,EACjBC,EAASC,EAAAA,EACTC,EAAcC,EAAe,EAE7BC,EAAeC,EAAS,IAAMH,EAAY,QAAU,GAAG,EAEvDI,EAAuB,IAAY,CACvC,MAAMC,EAASP,EAAO,UAAU,EAC1BQ,EACJf,GACAc,EAAO,KACL,CAAC,CAAE,KAAApB,CAAK,IAAMA,IAASW,EAAM,KAAK,QAAQ,IAAKL,CAAiB,CAClE,EACIA,EACAc,EAAO,KACL,CAAC,CAAE,KAAApB,CAAK,IACNW,EAAM,KAAK,MAAM,GAAG,EAAE,QAAU,GAChCX,IAASW,EAAM,KAAK,QAAQ,aAAc,GAAG,CACjD,GAAG,KAET,IAAIW,EAAmC,KAIvCC,EAAc,UAAWC,KAAQf,EAAU,MACzC,SAAW,CAACgB,EAAYC,CAAK,IAAKlB,EAChC,GAAIkB,EAAM,SAASF,CAAI,EAAG,CACxB,GACEjB,GACAa,EAAO,MAAM,CAAC,CAAE,KAAApB,CAAK,IAAMA,IAASW,EAAM,KAAK,QAAQ,IAAKX,CAAI,CAAC,EAEjE,SAEFsB,EAAoBG,EACpB,MAAMF,CACR,CAGJ,MAAMI,EAAeN,EACjBV,EAAM,SAAS,QAAQ,IAAKU,CAAa,EACzC,KAGJ,GAAIC,EAAmB,CACrB,MAAMM,EAAgBR,EAAO,KAC3B,CAAC,CAAE,KAAApB,CAAK,IAAMW,EAAM,KAAK,QAAQ,IAAKW,CAAiB,IAAMtB,CAC/D,EACM6B,EAAclB,EAAM,SAAS,QAAQ,IAAKW,CAAiB,EAE3DQ,EAEJF,EACIC,EAEAxB,IAAoB,WAElBiB,EACAjB,IAAoB,iBAAmBsB,EAErCA,EAEAE,EAEVhB,EAAO,QAAQiB,CAAS,CAC1B,MAESH,EACPd,EAAO,QAAQc,CAAY,EAClBhB,EAAM,OAAS,aACxBE,EAAO,QAAQ,WAAW,CAE9B,EAEAkB,EACE,IAAMpB,EAAM,KACXX,GAAS,CAER,SAAW,CAACgC,EAAMC,CAAE,IAAKC,EAAQC,CAAW,EAC1C,GAAIpC,EAAcC,EAAK,YAAa,CAAA,IAAMgC,EAAK,YAAA,EAAe,CACxDI,EAAWH,CAAE,EAAG,OAAO,KAAKA,CAAE,EAC7BpB,EAAO,QAAQoB,CAAE,EAEtB,MACF,CAEE9B,GAAcc,EAAa,OAAOE,EAAqB,CAC7D,EACA,CAAE,UAAW,EAAK,CACpB,CACF,EC/FakB,EAAiBC,GAAiD,CAC7E,MAAMC,EAAeC,EAAgBF,CAAc,EAC7CvB,EAAcC,IACdc,EAAYW,IACZ5B,EAASC,IAEf4B,EAAU,IAAM,CACVH,EAAa,OAAS,CAACI,EAAqB,MAAM5B,EAAY,KAAK,IACrEF,EAAO,QACLiB,EAAU,MAAM,QACdf,EAAY,MACZwB,EAAa,MAAM,UACrB,CACF,EACAI,EAAqB,MAAM5B,EAAY,KAAK,EAAI,GAEpD,CAAC,CACH"}