{"version":3,"file":"index.js","sources":["../../../src/client/worker/matchContent.ts","../../../src/client/worker/result.ts","../../../src/client/worker/suggestion.ts","../../../src/client/worker/index.ts"],"sourcesContent":["import type { Word } from \"../typings/index.js\";\n\nconst MAX_LENGTH = 100;\nconst SUFFIX_LENGTH = 20;\n\nexport const getMatchedContent = (\n  content: string,\n  queryString: string,\n): Word[] | null => {\n  const contentLowerCase = content.toLowerCase();\n  const queryStringLowerCase = queryString.toLowerCase();\n  const result: Word[] = [];\n\n  let startIndex = 0;\n  let contentLength = 0;\n\n  const addResult = (content: string, isEnd = false): void => {\n    let text = \"\";\n\n    // A beginning of a long string\n    if (contentLength === 0)\n      text =\n        content.length > SUFFIX_LENGTH\n          ? `… ${content.slice(-SUFFIX_LENGTH)}`\n          : content;\n    // Already the last text\n    else if (isEnd)\n      text =\n        // If the string will be longer than maxLength\n        content.length + contentLength > MAX_LENGTH\n          ? `${content.slice(0, MAX_LENGTH - contentLength)}… `\n          : content;\n    // Text is at the middle\n    else\n      text =\n        content.length > SUFFIX_LENGTH\n          ? `${content.slice(0, SUFFIX_LENGTH)} … ${content.slice(\n              -SUFFIX_LENGTH,\n            )}`\n          : content;\n\n    if (text) result.push(text);\n    contentLength += text.length;\n\n    if (!isEnd) {\n      result.push([\"mark\", queryString]);\n      contentLength += queryString.length;\n\n      if (contentLength >= MAX_LENGTH) result.push(\" …\");\n    }\n  };\n\n  let matchIndex = contentLowerCase.indexOf(queryStringLowerCase, startIndex);\n\n  if (matchIndex === -1) return null;\n\n  while (matchIndex >= 0) {\n    const endIndex = matchIndex + queryStringLowerCase.length;\n\n    // Append content before\n    addResult(content.slice(startIndex, matchIndex));\n\n    startIndex = endIndex;\n\n    if (contentLength > MAX_LENGTH) break;\n\n    matchIndex = contentLowerCase.indexOf(queryStringLowerCase, startIndex);\n  }\n\n  if (contentLength < MAX_LENGTH) addResult(content.slice(startIndex), true);\n\n  return result;\n};\n","import { entries } from \"@vuepress/helper/client\";\nimport type { MatchInfo, SearchIndex } from \"slimsearch\";\nimport { getStoredFields, search } from \"slimsearch\";\n\nimport { getMatchedContent } from \"./matchContent.js\";\nimport type {\n  CustomFieldIndexItem,\n  IndexItem,\n  PageIndexItem,\n} from \"../../shared/index.js\";\nimport type {\n  HeadingMatchedItem,\n  MatchedItem,\n  SearchResult,\n  TitleMatchedItem,\n  Word,\n  WorkerSearchOptions,\n} from \"../typings/index.js\";\n\ndeclare const SEARCH_PRO_SORT_STRATEGY: \"max\" | \"total\";\n\nexport type MiniSearchResult = IndexItem & {\n  terms: string[];\n  score: number;\n  match: MatchInfo;\n};\n\ninterface PageResult {\n  title: string;\n  contents: [result: MatchedItem, score: number][];\n}\n\ntype ResultMap = Record<string, PageResult>;\n\nconst sortWithTotal = (valueA: PageResult, valueB: PageResult): number =>\n  valueB.contents.reduce((total, [, score]) => total + score, 0) -\n  valueA.contents.reduce((total, [, score]) => total + score, 0);\n\nconst sortWithMax = (valueA: PageResult, valueB: PageResult): number =>\n  Math.max(...valueB.contents.map(([, score]) => score)) -\n  Math.max(...valueA.contents.map(([, score]) => score));\n\nexport const getResults = (\n  query: string,\n  localeIndex: SearchIndex<string, IndexItem, IndexItem>,\n  searchOptions: WorkerSearchOptions = {},\n): SearchResult[] => {\n  const resultMap: ResultMap = {};\n\n  const results = search(localeIndex, query, {\n    boost: {\n      [/** Heading */ \"h\"]: 2,\n      [/** Text */ \"t\"]: 1,\n      [/** CustomFields */ \"c\"]: 4,\n    },\n    prefix: true,\n    ...searchOptions,\n  });\n\n  results.forEach((result) => {\n    const { id, terms, score } = result;\n    const isCustomField = id.includes(\"@\");\n    const isSection = id.includes(\"#\");\n    const [pageIndex, info] = id.split(/[#@]/);\n    const pageId = Number(pageIndex);\n\n    const displayTerms = terms\n      .sort((a, b) => a.length - b.length)\n      .filter((item, index) =>\n        terms.slice(index + 1).every((term) => !term.includes(item)),\n      );\n\n    const { contents } = (resultMap[pageId] ??= {\n      title: \"\",\n      contents: [],\n    });\n\n    // CustomFieldIndexItem\n    if (isCustomField) {\n      contents.push([\n        {\n          type: \"customField\",\n          id: pageId,\n          index: info,\n          display: displayTerms\n            .map((term) =>\n              (result as CustomFieldIndexItem).c.map((field) =>\n                getMatchedContent(field, term),\n              ),\n            )\n            .flat()\n            .filter((item): item is Word[] => item !== null),\n        },\n        score,\n      ]);\n    } else {\n      const headerContent = displayTerms\n        .map((term) => getMatchedContent((result as PageIndexItem).h, term))\n        .filter((item): item is Word[] => item !== null);\n\n      if (headerContent.length)\n        contents.push([\n          {\n            type: isSection ? \"heading\" : \"title\",\n            id: pageId,\n            ...(isSection && { anchor: info }),\n            display: headerContent,\n          } as TitleMatchedItem | HeadingMatchedItem,\n          score,\n        ]);\n\n      if (/** Text */ \"t\" in result)\n        for (const text of result.t) {\n          const matchedContent = displayTerms\n            .map((term) => getMatchedContent(text, term))\n            .filter((item): item is Word[] => item !== null);\n\n          if (matchedContent.length)\n            contents.push([\n              {\n                type: \"text\",\n                id: pageId,\n                ...(isSection && { anchor: info }),\n                display: matchedContent,\n              },\n              score,\n            ]);\n        }\n    }\n  });\n\n  return entries(resultMap)\n    .sort(([, valueA], [, valueB]) =>\n      SEARCH_PRO_SORT_STRATEGY === \"total\"\n        ? sortWithTotal(valueA, valueB)\n        : sortWithMax(valueA, valueB),\n    )\n    .map(([id, { title, contents }]) => {\n      // Search to get title\n      if (!title) {\n        const pageIndex = getStoredFields(\n          localeIndex,\n          id,\n        ) as unknown as PageIndexItem;\n\n        if (pageIndex) title = pageIndex.h;\n      }\n\n      return {\n        title,\n        contents: contents.map(([result]) => result),\n      };\n    });\n};\n","import type { SearchIndex } from \"slimsearch\";\nimport { autoSuggest } from \"slimsearch\";\n\nimport type { IndexItem } from \"../../shared/index.js\";\nimport type { WorkerSearchOptions } from \"../typings/index.js\";\n\nexport const getSuggestions = (\n  query: string,\n  localeIndex: SearchIndex<string, IndexItem, IndexItem>,\n  searchOptions: WorkerSearchOptions = {},\n): string[] => {\n  const suggestions = autoSuggest(localeIndex, query, {\n    fuzzy: 0.2,\n    maxFuzzy: 3,\n    ...searchOptions,\n  }).map(({ suggestion }) => suggestion);\n\n  // filter multi-word suggestions if query is not multi-word\n  return query.includes(\" \")\n    ? suggestions\n    : suggestions.filter((suggestion) => !suggestion.includes(\" \"));\n};\n","import { loadJSONIndex } from \"slimsearch\";\n\nimport database from \"@temp/search-pro/index.js\";\n\nimport { getResults } from \"./result.js\";\nimport { getSuggestions } from \"./suggestion.js\";\nimport type { IndexItem } from \"../../shared/index.js\";\nimport type { MessageData } from \"../typings/index.js\";\n\nself.onmessage = async ({\n  data: { type = \"all\", query, locale, options, id },\n}: MessageEvent<MessageData>): Promise<void> => {\n  const { default: localeIndex } = await database[locale ?? \"/\"]();\n\n  const searchLocaleIndex = loadJSONIndex<string, IndexItem, IndexItem>(\n    localeIndex,\n    {\n      fields: [/** Heading */ \"h\", /** Text */ \"t\", /** CustomFields */ \"c\"],\n      storeFields: [\n        /** Heading */ \"h\",\n        /** Text */ \"t\",\n        /** CustomFields */ \"c\",\n      ],\n    },\n  );\n\n  if (type === \"suggest\")\n    self.postMessage([\n      type,\n      id,\n      getSuggestions(query, searchLocaleIndex, options),\n    ]);\n  else if (type === \"search\")\n    self.postMessage([type, id, getResults(query, searchLocaleIndex, options)]);\n  else\n    self.postMessage({\n      suggestions: [\n        type,\n        id,\n        getSuggestions(query, searchLocaleIndex, options),\n      ],\n      results: [type, id, getResults(query, searchLocaleIndex, options)],\n    });\n};\n"],"names":["getMatchedContent","content","queryString","contentLowerCase","queryStringLowerCase","result","startIndex","contentLength","addResult","isEnd","text","matchIndex","endIndex","sortWithTotal","valueA","valueB","total","score","sortWithMax","getResults","query","localeIndex","searchOptions","resultMap","search","id","terms","isCustomField","isSection","pageIndex","info","pageId","displayTerms","a","b","item","index","term","contents","field","headerContent","matchedContent","entries","title","getStoredFields","getSuggestions","suggestions","autoSuggest","suggestion","type","locale","options","database","searchLocaleIndex","loadJSONIndex"],"mappings":"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"}