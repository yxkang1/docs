import { SearchOptions as SearchOptions$1 } from 'slimsearch';
import { ComputedRef, App } from 'vue';
import { PageData } from 'vuepress/client';

type Word = [tag: string, content: string] | string;
interface TitleMatchedItem {
    type: "title";
    id: number;
    display: Word[][];
}
interface HeadingMatchedItem {
    type: "heading";
    id: number;
    anchor: string;
    display: Word[][];
}
interface ContentMatchedItem {
    type: "text";
    id: number;
    header?: string;
    anchor?: string;
    display: Word[][];
}
interface CustomMatchedItem {
    type: "customField";
    id: number;
    index: string;
    display: Word[][];
}
type MatchedItem = TitleMatchedItem | HeadingMatchedItem | ContentMatchedItem | CustomMatchedItem;
interface SearchResult {
    title: string;
    contents: MatchedItem[];
}
interface QueryResult {
    suggestions: string[];
    results: SearchResult[];
}

type PageIndexId = `${number}`;
interface PageIndexItem {
    id: PageIndexId;
    /** Heading */ h: string;
    /** Text */ t?: string[];
}
type SectionIndexId = `${PageIndexId}#${string}`;
interface SectionIndexItem {
    id: SectionIndexId;
    /** Heading */ h: string;
    /** Text */ t?: string[];
}
interface CustomFieldIndexItem {
    id: string;
    /** CustomFields */ c: string[];
}
type IndexItem = PageIndexItem | SectionIndexItem | CustomFieldIndexItem;

type WorkerSearchOptions = Omit<SearchOptions$1<string, IndexItem>, "fields" | "filter" | "boostDocument" | "tokenize" | "processTerm">;

interface SearchWorker {
    /**
     * Get both suggestions and results
     *
     * 同时获取建议和结果
     *
     * @param query - search query 搜索词
     * @param localePath - locale path 语言路径
     * @param options - search options 搜索选项
     */
    all: (query: string, localePath?: string, options?: SearchOptions$1<string, IndexItem>) => Promise<QueryResult>;
    /**
     * Get suggestions
     *
     * 获取建议
     *
     * @param query - search query 搜索词
     * @param localePath - locale path 语言路径
     * @param options - search options 搜索选项
     */
    suggest: (query: string, localePath?: string, options?: SearchOptions$1<string, IndexItem>) => Promise<string[]>;
    /**
     * Get search results
     *
     * 获取搜索结果
     *
     * @param query - search query 搜索词
     * @param localePath - locale path 语言路径
     * @param options - search options 搜索选项
     */
    search: (query: string, localePath?: string, options?: SearchOptions$1<string, IndexItem>) => Promise<SearchResult[]>;
    /**
     * Terminate current worker
     *
     * 终止当前 worker
     */
    terminate: () => void;
}
declare const createSearchWorker: () => SearchWorker;

interface SearchLocaleOptions extends WorkerSearchOptions {
    suggestionsFilter?: (suggestions: string[], query: string, locale: string, pageData: PageData) => string[];
    searchFilter?: (results: SearchResult[], query: string, locale: string, pageData: PageData) => SearchResult[];
    splitWord?: (query: string) => Promise<string[]>;
}
interface SearchOptions extends SearchLocaleOptions {
    locales?: Record<string, SearchLocaleOptions>;
}
declare const defineSearchConfig: (options: SearchOptions) => void;
declare const useSearchOptions: () => ComputedRef<SearchLocaleOptions>;
declare const injectSearchConfig: (app: App) => void;

export { type SearchLocaleOptions, type SearchOptions, type SearchWorker, createSearchWorker, defineSearchConfig, injectSearchConfig, useSearchOptions };
